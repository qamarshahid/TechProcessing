name: CI/CD - Backend to Cloud Run

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/src/**'
      - 'backend/package.json'
      - 'backend/package-lock.json'
      - 'backend/tsconfig*.json'
      - 'backend/nest-cli.json'
      - 'Dockerfile'
      - '.github/workflows/ci-cd.yml'
      - 'docker-compose.yml'
      - '.env.example'
      - 'backend/.env.example'
  workflow_dispatch:

concurrency:
  group: cloud-run-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install repo root dev dependencies (for ESLint flat config)
        working-directory: .
        run: npm ci

      - name: Install backend dependencies
        run: npm ci

      - name: Lint (ESLint 9 with root flat config)
        run: npx eslint@9 --config ../eslint.config.js "{src,apps,libs,test}/**/*.ts"

      - name: Unit tests
        run: npm test -- --ci
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/test-results/**
          if-no-files-found: ignore

  build-and-push:
    name: Build and Push Image
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      REPOSITORY: ${{ secrets.ARTIFACT_REPO }}
      IMAGE: ${{ secrets.IMAGE_NAME || 'techprocessing-api' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up gcloud auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .

      - name: Push image
        run: docker push $IMAGE_URI

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
      REPOSITORY: ${{ secrets.ARTIFACT_REPO }}
      IMAGE: ${{ secrets.IMAGE_NAME || 'techprocessing-api' }}
      VPC_CONNECTOR: ${{ secrets.VPC_CONNECTOR }}
      CLOUD_SQL_INSTANCE: ${{ secrets.CLOUD_SQL_INSTANCE }}
      SECRETS_FLAGS: ${{ secrets.CLOUD_RUN_SET_SECRETS_FLAGS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up gcloud auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy Cloud Run service
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
          EXTRA_FLAGS=""
          if [ -n "${VPC_CONNECTOR}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --vpc-connector=${VPC_CONNECTOR}"; fi
          if [ -n "${CLOUD_SQL_INSTANCE}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --add-cloudsql-instances=${CLOUD_SQL_INSTANCE}"; fi
          if [ -n "${SECRETS_FLAGS}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS ${SECRETS_FLAGS}"; fi

          gcloud run deploy ${{ env.SERVICE }} \
            --region ${{ env.REGION }} \
            --image $IMAGE_URI \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --max-instances=4 \
            --cpu=1 \
            --memory=512Mi \
            --timeout=60s \
            --set-env-vars NODE_ENV=production \
            --set-env-vars PORT=8080 \
            --set-env-vars DATABASE_SSL=${{ secrets.DATABASE_SSL || 'true' }},DATABASE_SSL_REJECT_UNAUTHORIZED=${{ secrets.DATABASE_SSL_REJECT_UNAUTHORIZED || 'false' }} \
            $EXTRA_FLAGS

  migrate:
    name: Run DB migrations via Cloud Run Job
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      JOB_NAME: ${{ secrets.MIGRATIONS_JOB_NAME || 'techprocessing-migrations' }}
      REPOSITORY: ${{ secrets.ARTIFACT_REPO }}
      IMAGE: ${{ secrets.IMAGE_NAME || 'techprocessing-api' }}
      VPC_CONNECTOR: ${{ secrets.VPC_CONNECTOR }}
      CLOUD_SQL_INSTANCE: ${{ secrets.CLOUD_SQL_INSTANCE }}
      SECRETS_FLAGS: ${{ secrets.CLOUD_RUN_SET_SECRETS_FLAGS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up gcloud auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create/Update Cloud Run Job for migrations
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
          gcloud run jobs describe ${{ env.JOB_NAME }} --region ${{ env.REGION }} >/dev/null 2>&1 && EXISTS=1 || EXISTS=0
          EXTRA_FLAGS=""
          if [ -n "${VPC_CONNECTOR}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --vpc-connector=${VPC_CONNECTOR}"; fi
          if [ -n "${CLOUD_SQL_INSTANCE}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS --add-cloudsql-instances=${CLOUD_SQL_INSTANCE}"; fi
          if [ -n "${SECRETS_FLAGS}" ]; then EXTRA_FLAGS="$EXTRA_FLAGS ${SECRETS_FLAGS}"; fi
          if [ "$EXISTS" -eq 0 ]; then
            gcloud run jobs create ${{ env.JOB_NAME }} \
              --image $IMAGE_URI \
              --region ${{ env.REGION }} \
              --task-timeout=10m \
              --memory=512Mi \
              --cpu=1 \
              --set-env-vars NODE_ENV=production,PORT=8080 \
              --command "npm" \
              --args "run","migration:run:prod" \
              $EXTRA_FLAGS
          else
            gcloud run jobs update ${{ env.JOB_NAME }} \
              --image $IMAGE_URI \
              --region ${{ env.REGION }} \
              --task-timeout=10m \
              --memory=512Mi \
              --cpu=1 \
              --set-env-vars NODE_ENV=production,PORT=8080 \
              --command "npm" \
              --args "run","migration:run:prod" \
              $EXTRA_FLAGS
          fi

      - name: Trigger migrations job execution
        run: |
          gcloud run jobs execute ${{ env.JOB_NAME }} --region ${{ env.REGION }} --wait
